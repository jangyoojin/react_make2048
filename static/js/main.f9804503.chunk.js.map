{"version":3,"sources":["Score.js","Board.js","Restart.js","App.js","index.js"],"names":["Score","props","className","this","score","style","padding","best","Component","getRandom","min","max","Math","floor","random","Board","state","classNa","Array","fill","map","e","word","NewBlock","bind","moveBlocks","moveLeft","onKeyDown","turnArrayImplement","merge","move","checkMove","i","j","classNameUpdate","wordUpdate","setState","window","addEventListener","newClassNa","newWord","count","check","turnClassNa","turnWord","point","keyCode","console","log","turnArray","isFull","calcScore","updateBest","alert","c","idx","left","arr","arr2","X","Y","x","y","id","row","col","Restart","App","localStorage","getItem","setItem","Number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9804503.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Score extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TitleScore\">\n\t\t\t\t<span className=\"veryj\">\n\t\t\t\t\t<span className=\"text-style-1\">2048</span>ver.yj\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t\t<span className=\"boxTitle\">Score</span>\n\t\t\t\t\t<div className=\"boxText\">{this.props.score}</div>\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t\t<span className=\"boxTitle\" style={{ padding: \"5px 13px 5px 12px\" }}>Best</span>\n\t\t\t\t\t<div className=\"boxText\" >{this.props.best}</div>\n\t\t\t\t</span>\n\t\t\t</div >\n\t\t);\n\t}\n}\n\n\nexport default Score;\n","import React, { Component } from 'react';\n\nconst getRandom = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classNa: Array(4).fill('block0').map((e) => { return Array(4).fill('block0') }),\n            word: Array(4).fill(0).map((e) => { return Array(4).fill(0) }),\n        };\n        this.NewBlock = this.NewBlock.bind(this);\n        this.moveBlocks = this.moveBlocks.bind(this);\n        this.moveLeft = this.moveLeft.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.turnArrayImplement = this.turnArrayImplement.bind(this);\n        this.merge = this.merge.bind(this);\n        this.move = this.move.bind(this);\n        this.checkMove = this.checkMove.bind(this);\n        this.NewBlock();\n        this.NewBlock();\n    }\n\n    //make new blocks\n    //블럭이 들어있지 않은 자리에 숫자2 블럭을 추가함\n    NewBlock() {\n        let i, j;\n        do {\n            i = getRandom(0, 4);\n            j = getRandom(0, 4);\n        } while (this.state.classNa[i][j] !== 'block0')\n        const classNameUpdate = [...this.state.classNa];\n        const wordUpdate = [...this.state.word];\n        let twoOrfour = getRandom(0, 11);\n        if (twoOrfour === 10) {\n            classNameUpdate[i][j] = 'block4';\n            wordUpdate[i][j] = 4;\n        } else {\n            classNameUpdate[i][j] = 'block2';\n            wordUpdate[i][j] = 2;\n        }\n        this.setState({ classNa: classNameUpdate });\n        this.setState({ word: wordUpdate });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    onKeyDown(e) {\n        this.moveBlocks(e)\n    }\n\n    turnArray(newClassNa, newWord, count) {\n        let check = 0;\n        while (check < count) {\n            [newClassNa, newWord] = this.turnArrayImplement(newClassNa, newWord);\n            check++;\n        }\n        return [newClassNa, newWord];\n    }\n\n    turnArrayImplement(newClassNa, newWord) {\n        const turnClassNa = Array(4).fill(null).map((e) => { return Array(4).fill(null) });\n        const turnWord = Array(4).fill(null).map((e) => { return Array(4).fill(null) });\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                turnClassNa[i][j] = newClassNa[3 - j][i];\n                turnWord[i][j] = newWord[3 - j][i];\n            }\n        }\n        return [turnClassNa, turnWord];\n    }\n\n    //block moving function\n    moveBlocks(e) {\n        let newClassNa, newWord, point, check;\n        switch (e.keyCode) {\n            case 37://left\n                check = this.checkMove([...this.state.classNa]);\n                if (check) [newClassNa, newWord, point] = this.moveLeft([...this.state.classNa], [...this.state.word]);\n                console.log('left')\n                break;\n            case 38: //up\n                [newClassNa, newWord] = this.turnArray([...this.state.classNa], [...this.state.word], 3);\n                check = this.checkMove(newClassNa);\n                if (check) [newClassNa, newWord, point] = this.moveLeft(newClassNa, newWord);\n                [newClassNa, newWord] = this.turnArray(newClassNa, newWord, 1);\n                console.log('up');\n                break;\n            case 39: //right\n                // this.moveRight();\n                [newClassNa, newWord] = this.turnArray([...this.state.classNa], [...this.state.word], 2);\n                check = this.checkMove(newClassNa);\n                if (check) [newClassNa, newWord, point] = this.moveLeft(newClassNa, newWord);\n                [newClassNa, newWord] = this.turnArray(newClassNa, newWord, 2);\n                break;\n            case 40: //down\n                //this.moveDown();\n                [newClassNa, newWord] = this.turnArray([...this.state.classNa], [...this.state.word], 1);\n                check = this.checkMove(newClassNa);\n                if (check) [newClassNa, newWord, point] = this.moveLeft(newClassNa, newWord);\n                [newClassNa, newWord] = this.turnArray(newClassNa, newWord, 3);\n                break;\n            default:\n                return;\n        }\n        //보드판이 가득 찼는지 확인\n        let isFull = true;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (newClassNa[i][j] === 'block0') {\n                    isFull = false;\n                    break;\n                }\n            }\n        }\n        //이동할 블럭이 있다면 setState\n        if (check) {\n            this.setState({ classNa: newClassNa });\n            this.setState({ word: newWord });\n            this.props.calcScore(point);\n            if (!isFull) this.NewBlock();\n        }\n        //2048 만들어졌는지 체크하기\n        let finish = false;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (newClassNa[i][j] === 'block2048') {\n                    isFull = true;\n                    break;\n                }\n            }\n        }\n        if (finish) {\n            this.props.updateBest();\n            alert(\"게임 종료: 2048을 완성했습니다!!\");\n        }\n        //보드판이 가득 찼는데 더이상 이동할 수 없다면 게임 종료\n        if (!check && isFull) {\n            //best 점수 업데이트\n            this.props.updateBest();\n            //보드 판이 가득 차면 alert 띄우기\n            alert(\"게임 종료: 보드가 가득 찼습니다!!\");\n        }\n    }\n\n    checkMove(newClassNa) {\n        let check = false;\n        //병합\n        for (var i = 0; i < 4; i++) {\n            //한 줄에 병합을 두 번 하는 경우\n            if (newClassNa[i][0] === newClassNa[i][1] && newClassNa[i][2] === newClassNa[i][3]) {\n                for (let c = 0; c < 2; c++) {\n                    const idx = c * 2;\n                    if (newClassNa[i][idx] !== 'block0') {\n                        // 병합\n                        check = true;\n                        return check;\n                    }\n                }\n            }\n            //한 줄에 병합 한 번 하는 경우 + 병합하는 것이 없는 경우\n            else {\n                for (var j = 1; j < 4; j++) {\n                    var left;\n                    //빈칸이면 패스하기\n                    if (newClassNa[i][j] === 'block0') continue;\n                    // 중간에 빈 블럭이 있는지 확인\n                    for (left = j - 1; left >= 0; left--) {\n                        if (newClassNa[i][left] !== 'block0' || left === 0) break;\n                    }\n                    // left = j보다 작은 채워진 가장 가까운 blocK의 col index\n                    if (newClassNa[i][j] === newClassNa[i][left]) {\n                        //병합\n                        check = true;\n                        return check;\n                    }\n                }\n            }\n        }\n        //이동\n        for (let i = 0; i < 4; i++) {\n            for (let j = 1; j < 4; j++) {\n                let left;\n                // 빈칸이면 이동x\n                if (newClassNa[i][j] === 'block0') continue;\n                // 왼쪽 끝이 비었으면 현재값 넣어주기\n                if (newClassNa[i][0] === 'block0') {\n                    check = true;\n                    return check;\n                }\n                for (left = j - 1; left >= 0; left--) {\n                    if (newClassNa[i][left] !== 'block0' || left === 0) break;\n                }\n                // left = 왼쪽 중에 비어 있지 않은 가장 큰 index\n                if (left !== j - 1) {\n                    check = true;\n                    return check;\n                }\n            }\n        }\n        return check;\n    }\n\n    //move blocks function\n    //충돌 시 병합 여부 체크하기\n    // setState하기\n    moveLeft(newClassNa, newWord) {\n        //추가 점수 저장할 변수\n        let point = 0;\n        //병합\n        for (var i = 0; i < 4; i++) {\n            //한 줄에 병합을 두 번 하는 경우\n            if (newClassNa[i][0] === newClassNa[i][1] && newClassNa[i][2] === newClassNa[i][3]) {\n                for (let c = 0; c < 2; c++) {\n                    const idx = c * 2;\n                    if (newClassNa[i][idx] !== 'block0') {\n                        // 병합\n                        point += this.merge(newWord, newClassNa, i, idx, i, idx + 1);\n                    }\n                }\n                console.log(newClassNa);\n            }\n            //한 줄에 병합 한 번 하는 경우 + 병합하는 것이 없는 경우\n            else {\n                for (var j = 1; j < 4; j++) {\n                    var left;\n                    //빈칸이면 패스하기\n                    if (newClassNa[i][j] === 'block0') continue;\n                    // 중간에 빈 블럭이 있는지 확인\n                    for (left = j - 1; left >= 0; left--) {\n                        if (newClassNa[i][left] !== 'block0' || left === 0) break;\n                    }\n                    // left = j보다 작은 채워진 가장 가까운 blocK의 col index\n                    if (newClassNa[i][j] === newClassNa[i][left]) {\n                        //병합\n                        point += this.merge(newWord, newClassNa, i, left, i, j);\n                        break;\n                    }\n                }\n            }\n            console.log('move');\n        }\n        //이동\n        for (let i = 0; i < 4; i++) {\n            for (let j = 1; j < 4; j++) {\n                let left;\n                // 빈칸이면 이동x\n                if (newClassNa[i][j] === 'block0') continue;\n                // 왼쪽 끝이 비었으면 현재값 넣어주기\n                if (newClassNa[i][0] === 'block0') {\n                    this.move(newClassNa, newWord, i, 0, j);\n                    continue;\n                }\n                for (left = j - 1; left >= 0; left--) {\n                    if (newClassNa[i][left] !== 'block0' || left === 0) break;\n                }\n                // left = 왼쪽 중에 비어 있지 않은 가장 큰 index\n                if (left !== j - 1) {\n                    this.move(newClassNa, newWord, i, left + 1, j);\n                }\n            }\n        }\n        return [newClassNa, newWord, point];\n    }\n\n    merge(arr, arr2, X, Y, x, y) {\n        arr[X][Y] *= 2;\n        arr2[X][Y] = 'block' + arr[X][Y];\n        arr[x][y] = 0;\n        arr2[x][y] = 'block0';\n        return arr[X][Y];\n    }\n\n    move(newClassNa, newWord, X, Y, y) {\n        newClassNa[X][Y] = newClassNa[X][y];\n        newWord[X][Y] = newWord[X][y];\n        newClassNa[X][y] = 'block0';\n        newWord[X][y] = 0;\n    }\n\n    render() {\n        return (\n            <div className=\"background\">\n                <table id='board'>\n                    <tbody>\n                        {Array(4).fill(null).map((e, row) =>\n                            <tr key={row}>\n                                {Array(4).fill(null).map((e, col) =>\n                                    <td className={this.state.classNa[row][col]} key={col}>\n                                        {this.state.word[row][col]}\n                                    </td>)}\n                            </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n\nexport default Board;\n","import React, { Component } from 'react';\n\nclass Restart extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id='reset'>\n\t\t\t\t<span id='undo'>undo</span>\n\t\t\t\t<span id='restart'>restart</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default Restart;\n","import React, { Component } from 'react';\nimport './style.css';\nimport Score from './Score.js';\nimport Board from './Board';\nimport Restart from './Restart'\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tscore: 0,\n\t\t};\n\t\tthis.calcScore = this.calcScore.bind(this);\n\t\tthis.updateBest = this.updateBest.bind(this);\n\t}\n\n\tcalcScore(point) {\n\t\tconst score = this.state.score;\n\t\tthis.setState({\n\t\t\tscore: score + point\n\t\t});\n\t}\n\n\tupdateBest() {\n\t\tif (localStorage.getItem('best') === null) localStorage.setItem('best', 0);\n\t\tif (Number(localStorage.getItem('best')) < this.state.score) {\n\t\t\tlocalStorage.setItem('best', this.state.score);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<Score score={this.state.score} best={localStorage.getItem('best')} />\n\t\t\t\t\t<Restart />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Board calcScore={this.calcScore} updateBest={this.updateBest} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}